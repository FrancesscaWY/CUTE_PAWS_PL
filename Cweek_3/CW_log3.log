>>1 逗号运算符 其表达式返回值为最后一个表达式的值
>>2 类型转换符
    static_cast<type>(expr)  不能改变const、volatile、__unaligned属性 不安全
    const_cast<type>(expr)   只能改变const、volatile属性 不安全
    dynamic_cast<type>(expr) 用于类层次间的上行（子到父）、下行（父到子）转换，只能用于多态类型 相对安全
    reinterpret_cast<type>(expr) 重新解释类型 不安全
>>3 typeid(expr).name() 返回expr的类型名
>>4 函数调用类型
    传值调用
    引用调用
    指针调用
>>5 lambda function
    ①[capture](parameters) -> return_type {body}
    capture: [] 不捕获任何变量 [=] 捕获所有变量 [&] 捕获所有变量并按引用捕获
    parameters: 形参列表
    return_type: 返回类型
    body: 函数体
    其中capture、parameters、return_type可以省略
    ②捕获列表:
            [] 不捕获任何变量
            [&] 捕获外部作用域中所有变量，并作为引用在函数体中使用
            [=] 捕获外部作用域中所有变量，并在函数体中作为副本使用
            [=,&foo] 捕获foo变量并作为引用，其余变量作为副本
            [bar] 捕获bar变量并作为副本，其余变量不捕获
            [this] 捕获当前对象（类）的this指针，让lambda表达式拥有和当前对象相同的生命周期
                   获当前类中的 this 指针,让 lambda 表达式拥有和当前类成员函数同样的访问权限,如果已经使用了 & 或者 =, 默认添加此选项
    ③mutable: 默认情况下，lambda函数总是一个const函数，mutable可以取消其常量性，修改按值捕获的变量
    ④lambda表达式的类型在C++11中会被看做是一个带operator()的类，即仿函数。
      按照C++标准，lambda表达式的operator()默认是const的，一个const成员函数是无法修改成员变量值的。
    ⑤mutable 选项的作用就在于取消 operator () 的 const 属性
    ⑥lambda 表达式在 C++ 中会被看做是一个仿函数,可通过是std::function和std::bind来使用
    ⑦auto关键字可以自动推导出lambda表达式的类型
>>6 有关数的函数参考num_tr.cpp 理解，注意头文件的引用;随机函数基本用法参考s__rand.cpp 理解.
>>7 "\t":制表符
>>8 "strlen()":返回字符串长度,不加入'\0';
              "\0"是字符串结束标志
>>9  "strlen()":返回字符串长度,不加入'\0';
     "strcat()":字符串拼接
     "strcpy()":字符串复制
     "strcmp()":字符串比较
     "strchr()":查找字符
     "strstr()":查找字符串
     "strtok()":字符串分割
>>10 指针数组:存储指针的一个数组,char *p[]={"hello","world"}; p[0]指向"hello" p[1]指向"world"
>>11.二级指针:指向指针的指针
>>12.以指针为函数参数:P_T_F.CPP
>>13 C++不支持返回局部变量地址，除非返回的是静态变量(static)地址或者是引用
     从函数返回指针 F_T_P.CPP
>>14 引用:不能为空引用，引用必须连接到一块合法的内存，创建时初始化，后不能再引用其他变量
         引用改变值，原变量也改变
>>15 cerr:标准错误输出流(非缓冲区)
     clog:标准日志输出流（缓冲区）日志信息不会立即输出，而是等缓冲区满了才输出
>>16 结构作为函数参数STP_UCT.CPP
